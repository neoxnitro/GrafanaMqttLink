import "math"
import "influxdata/influxdb/monitor"

// determine the duration of an event on transition state
// in this case, when "wakeup_reason" change from 4 to 7
// who represent the periode between the LED on and fish food is taken by an human

from(bucket: "fishesp32")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "mqtt_consumer")
  |> filter(fn: (r) => r["_field"] == "wakeup_reason")
  |> drop(columns: ["_start", "_stop", "host", "topic", "_measurement", "_field"])
  |> sort(columns: ["_time"])
  
  // elasped time in second for each value
  |> elapsed(timeColumn: "_time", unit: 1s, columnName: "sec")
  
  // computation second into minute
  |> map(fn: (r) => ({
      r with 
      float_minutes: math.round(x: (float(v: r.sec) / 60.0) * 100.0) / 100.0
  }))
  
  // change "_value" type to string (to be used by stateChanges)
  |> map(fn: (r) => ({ r with _value: string(v: r._value) }))
  
  // stateChanges only works with "_level" field, so rename it
  |> rename(columns: { _value: "_level"})
  
  // state transition condition (from any (different of 7) to 7)
  |> monitor.stateChanges(toLevel: "7") 
  
  // remove unwanted field
  |> drop(columns: ["table", "_level", "sec", "_result" ])
  |> yield()